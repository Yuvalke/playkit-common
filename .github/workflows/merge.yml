# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 12
          registry-url: https://registry.npmjs.org/

      - name: Print node and yarn versions
        run: |
          node --version
          npm --version
          yarn --version
      - name: Install dependencies
        run: yarn install --check-files

      # extract branch name on pull request
      - name: Print branch name
        run: |
          git_hash=$(git rev-parse --short "$GITHUB_SHA")
          git_branch=${GITHUB_REF#refs/heads/}
          echo $git_hash
          echo $git_branch
          echo $(git branch --show-current)


      - name: Build
        run: echo "Build new version"

      - name: Run ESLint
        run: echo "yarn lint"
        env:
          CI: true

      - name: Run tests
        run: echo "yarn test"
        env:
          CI: true

      - name: Travis script
        run: |
          chmod +x ./travis.sh
          bash ./travis.sh

      - name: Before deploy
        run: |
          chmod +x ./before_deploy.sh
          bash ./before_deploy.sh

      - name: Deploy
        run: |
          chmod +x ./deploy.sh
          bash ./deploy.sh

      - name: Get branch names
        id: branch-name
        uses: tj-actions/branch-names@v4.3

      - name: Running on the default branch.
        if: steps.branch-name.outputs.is_default == 'true'
        run: |
          echo "Running on default: ${{ steps.branch-name.outputs.current_branch }}"
        # Outputs: "Running on default: main".

      - name: Running on a pull request branch.
        if: steps.branch-name.outputs.is_default == 'false'
        run: |
          echo "Running on pr: ${{ steps.branch-name.outputs.current_branch }}"
        # Outputs: "Running on pr: feature/test".

      - name: Running on a tag branch.
        if: steps.branch-name.outputs.is_tag == 'true'
        run: |
          echo "Running on tag: ${{ steps.branch-name.outputs.tag }}"
        # Outputs: "Running on tag: v0.0.1".

      - name: Running on a non tag based branch and the default branch.
        if: steps.branch-name.outputs.is_tag == 'false' && steps.branch-name.outputs.is_default == 'true'
        run: |
          echo "Running on branch: ${{ steps.branch-name.outputs.current_branch }}"
        # Outputs: "Running on branch: main".

      - name: Running on a non tag based branch and a PR branch.
        if: steps.branch-name.outputs.is_tag == 'false' && steps.branch-name.outputs.is_default == 'false'
        run: |
          echo "Running on branch: ${{ steps.branch-name.outputs.current_branch }}"
        # Outputs: "Running on branch: feature/test".

      - name: Current branch name
        if: github.event_name == 'pull_request'
        run: |
          echo "${{ steps.branch-name.outputs.current_branch }}"
        # Outputs: "feature/test" current PR branch.

      - name: Current branch name
        if: github.event_name == 'push'
        run: |
          echo "${{ steps.branch-name.outputs.current_branch }}"
        # Outputs: "main" the branch that triggered the push event.

      - name: Get Ref brach name
        run: |
          echo "${{ steps.branch-name.outputs.ref_branch }}"
        #  Outputs: "main" for non PR branches | "1/merge" for a PR branch

      - name: Get Head Ref branch name
        if: github.event_name == 'pull_request'
        run: |
          echo "${{ steps.branch-name.outputs.head_ref_branch }}"
        # Outputs: "feature/test" current PR branch.

      - name: Get Base Ref branch name
        if: github.event_name == 'pull_request'
        run: |
          echo "${{ steps.branch-name.outputs.base_ref_branch }}"
        # Outputs: "main" for main <- PR branch.

      - name: Get the current tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "${{ steps.branch-name.outputs.tag }}"

#      - name: set canary version NPM
#        run: |
#          echo "Run standard-version"
#          yarn run release --prerelease canary --skip.commit=true --skip.tag=true
#          sha=$(git rev-parse --verify --short HEAD)
#          echo "Current sha ${sha}"
#          commitNumberAfterTag=$(git rev-list  `git rev-list --tags --no-walk --max-count=1`..HEAD --count)
#          echo "Number of commit from last tag ${commitNumberAfterTag}"
#          currentVersion=$(npx -c 'echo "$npm_package_version"')
#          echo "Current version ${currentVersion}"
#          newVersion=$(echo $currentVersion | sed -e "s/canary\.[[:digit:]]/canary.${commitNumberAfterTag}-${sha}/g")
#          echo "New version ${newVersion}"
#          sed -iE "s/$currentVersion/$newVersion/g" package.json
#          sed -iE "s/$currentVersion/$newVersion/g" CHANGELOG.md
#          rm package.jsonE
#          rm CHANGELOG.mdE
#
#      - name: deploy NPM
#        run: npm publish --access public --tag canary
#        env:
#          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
