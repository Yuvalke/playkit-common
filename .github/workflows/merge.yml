# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
#    if: "!contains(github.event.commits[0].message, '[skip ci]')"
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 12
          registry-url: https://registry.npmjs.org/

      - name: Print node and yarn versions
        run: |
          node --version
          npm --version
          yarn --version

      - name: print commit message
        run: |
          echo toJSON(github.event.commits.*.message)
          echo github.event.commits[0].message

#      - name: Install dependencies
#        run: yarn install --check-files
#
#      # extract branch name on pull request
#      - name: Print branch name
#        run: |
#          git_hash=$(git rev-parse --short "$GITHUB_SHA")
#          git_branch=${GITHUB_REF#refs/heads/}
#          echo $git_hash
#          echo $git_branch
#          echo $(git branch --show-current)


      - name: Build
        run: echo "Build new version"

#      - name: Run ESLint
#        run: echo "yarn lint"
#        env:
#          CI: true
#
#      - name: Run tests
#        run: echo "yarn test"
#        env:
#          CI: true
#
#      - name: Travis script
#        run: |
#          chmod +x ./travis.sh
#          bash ./travis.sh
#
#      - name: Before deploy
#        run: |
#          chmod +x ./before_deploy.sh
#          bash ./before_deploy.sh

#      - name: Deploy
#        run: |
#          chmod +x ./deploy.sh
#          bash ./scripts/deploy.sh ${{secrets.NPM_TOKEN}}

#      - name: set canary version NPM
#        run: |
#          echo "Run standard-version"
#          yarn run release --prerelease canary --skip.commit=true --skip.tag=true
#          sha=$(git rev-parse --verify --short HEAD)
#          echo "Current sha ${sha}"
#          commitNumberAfterTag=$(git rev-list  `git rev-list --tags --no-walk --max-count=1`..HEAD --count)
#          echo "Number of commit from last tag ${commitNumberAfterTag}"
#          currentVersion=$(npx -c 'echo "$npm_package_version"')
#          echo "Current version ${currentVersion}"
#          newVersion=$(echo $currentVersion | sed -e "s/canary\.[[:digit:]]/canary.${commitNumberAfterTag}-${sha}/g")
#          echo "New version ${newVersion}"
#          sed -iE "s/$currentVersion/$newVersion/g" package.json
#          sed -iE "s/$currentVersion/$newVersion/g" CHANGELOG.md
#          rm package.jsonE
#          rm CHANGELOG.mdE
#
#      - name: deploy NPM
#        run: npm publish --access public --tag canary
#        env:
#          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
